import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { 
  Plus, 
  Search, 
  Filter, 
  MoreHorizontal, 
  Edit, 
  Copy, 
  Trash2, 
  Calendar,
  User,
  BarChart3,
  Eye
} from 'lucide-react';
import { Card } from '../components/ui/Card';
import { Button } from '../components/ui/Button';
import { Table } from '../components/ui/Table';
import { Badge } from '../components/ui/Badge';
import { DropdownMenu } from '../components/ui/DropdownMenu';

interface CustomReport {
  id: string;
  name: string;
  description: string;
  type: 'dashboard' | 'table' | 'chart';
  status: 'active' | 'draft' | 'archived';
  createdBy: string;
  createdAt: string;
  lastModified: string;
  lastRun?: string;
  metrics: string[];
  filters: number;
  isShared: boolean;
}

const mockCustomReports: CustomReport[] = [
  {
    id: '1',
    name: 'Weekly Performance Dashboard',
    description: 'Comprehensive weekly sales and performance metrics',
    type: 'dashboard',
    status: 'active',
    createdBy: 'John Doe',
    createdAt: '2025-01-15',
    lastModified: '2025-01-20',
    lastRun: '2 hours ago',
    metrics: ['Gross Sales', 'Net Sales', 'Transaction Count', 'Average Order Value'],
    filters: 3,
    isShared: true
  },
  {
    id: '2',
    name: 'Product Category Analysis',
    description: 'Deep dive into product category performance',
    type: 'table',
    status: 'active',
    createdBy: 'Jane Smith',
    createdAt: '2025-01-10',
    lastModified: '2025-01-18',
    lastRun: '1 day ago',
    metrics: ['Sales by Category', 'Units Sold', 'Profit Margin'],
    filters: 5,
    isShared: false
  },
  {
    id: '3',
    name: 'Customer Behavior Trends',
    description: 'Analysis of customer purchasing patterns',
    type: 'chart',
    status: 'draft',
    createdBy: 'Mike Johnson',
    createdAt: '2025-01-22',
    lastModified: '2025-01-25',
    metrics: ['Customer Frequency', 'Repeat Purchase Rate', 'Customer Lifetime Value'],
    filters: 2,
    isShared: false
  },
  {
    id: '4',
    name: 'Monthly Revenue Breakdown',
    description: 'Detailed monthly revenue analysis with comparisons',
    type: 'dashboard',
    status: 'active',
    createdBy: 'Sarah Wilson',
    createdAt: '2025-01-05',
    lastModified: '2025-01-23',
    lastRun: '3 hours ago',
    metrics: ['Monthly Revenue', 'YoY Growth', 'Revenue by Channel'],
    filters: 4,
    isShared: true
  }
];

export function CustomReportsPage() {
  const navigate = useNavigate();
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState<string>('all');

  // Load reports from localStorage (in real app, this would be from API)
  const [customReports, setCustomReports] = useState<CustomReport[]>(() => {
    const savedReports = localStorage.getItem('customReports');
    const autoGeneratedReports = savedReports ? JSON.parse(savedReports) : [];
    return [...mockCustomReports, ...autoGeneratedReports];
  });

  // Refresh reports when component mounts or when navigating back
  React.useEffect(() => {
    const savedReports = localStorage.getItem('customReports');
    const autoGeneratedReports = savedReports ? JSON.parse(savedReports) : [];
    setCustomReports([...mockCustomReports, ...autoGeneratedReports]);
  }, []);

  const handleCreateReport = () => {
    navigate('/financial-suite/custom-reports/create');
  };

  const handleEditReport = (reportId: string) => {
    navigate(`/financial-suite/custom-reports/edit/${reportId}`);
  };

  const handleViewReport = (reportId: string) => {
    navigate(`/financial-suite/custom-reports/view/${reportId}`);
  };

  const handleDuplicateReport = (reportId: string) => {
    console.log('Duplicating report:', reportId);
  };

  const handleDeleteReport = (reportId: string) => {
    // Remove from both mock data and localStorage
    const updatedReports = customReports.filter(report => report.id !== reportId);
    setCustomReports(updatedReports);
    
    // Update localStorage
    const savedReports = JSON.parse(localStorage.getItem('customReports') || '[]');
    const updatedSavedReports = savedReports.filter((report: any) => report.id !== reportId);
    localStorage.setItem('customReports', JSON.stringify(updatedSavedReports));
  };

  const filteredReports = customReports.filter(report => {
    const matchesSearch = report.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         report.description.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesStatus = statusFilter === 'all' || report.status === statusFilter;
    return matchesSearch && matchesStatus;
  });

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'active': return 'bg-green-100 text-green-800';
      case 'draft': return 'bg-yellow-100 text-yellow-800';
      case 'archived': return 'bg-gray-100 text-gray-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'dashboard': return BarChart3;
      case 'table': return Filter;
      case 'chart': return BarChart3;
      default: return BarChart3;
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white border-b border-gray-200">
        <div className="px-6 py-4">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-2xl font-bold text-gray-900">Custom Reports</h1>
              <p className="text-sm text-gray-600 mt-1">
                Create and manage your custom analytics reports
              </p>
            </div>
            <Button onClick={handleCreateReport}>
              <Plus className="h-4 w-4 mr-2" />
              Create Report
            </Button>
          </div>
        </div>
      </div>

      {/* Filters and Search */}
      <div className="bg-white border-b border-gray-200">
        <div className="px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                <input
                  type="text"
                  placeholder="Search reports..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
              </div>
              <select
                value={statusFilter}
                onChange={(e) => setStatusFilter(e.target.value)}
                className="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="all">All Status</option>
                <option value="active">Active</option>
                <option value="draft">Draft</option>
                <option value="archived">Archived</option>
              </select>
            </div>
            <div className="text-sm text-gray-600">
              {filteredReports.length} of {mockCustomReports.length} reports
            </div>
          </div>
        </div>
      </div>

      {/* Reports Table */}
      <div className="p-6">
        <Card>
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead className="bg-gray-50 border-b border-gray-200">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Report
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Type
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Status
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Created By
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Last Modified
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Last Run
                  </th>
                  <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {filteredReports.map((report) => {
                  const TypeIcon = getTypeIcon(report.type);
                  return (
                    <tr key={report.id} className="hover:bg-gray-50">
                      <td className="px-6 py-4">
                        <div className="flex items-start space-x-3">
                          <div className="p-2 bg-blue-100 rounded-lg">
                            <TypeIcon className="h-4 w-4 text-blue-600" />
                          </div>
                          <div>
                            <div className="flex items-center space-x-2">
                              <h3 className="text-sm font-medium text-gray-900">
                                {report.name}
                              </h3>
                              {report.isShared && (
                                <Badge variant="outline" size="sm">
                                  Shared
                                </Badge>
                              )}
                            </div>
                            <p className="text-sm text-gray-600 mt-1">
                              {report.description}
                            </p>
                            <div className="flex items-center space-x-4 mt-2">
                              <span className="text-xs text-gray-500">
                                {report.metrics.length} metrics
                              </span>
                              <span className="text-xs text-gray-500">
                                {report.filters} filters
                              </span>
                            </div>
                          </div>
                        </div>
                      </td>
                      <td className="px-6 py-4">
                        <Badge variant="outline" className="capitalize">
                          {report.type}
                        </Badge>
                      </td>
                      <td className="px-6 py-4">
                        <Badge className={`capitalize ${getStatusColor(report.status)}`}>
                          {report.status}
                        </Badge>
                      </td>
                      <td className="px-6 py-4">
                        <div className="flex items-center space-x-2">
                          <User className="h-4 w-4 text-gray-400" />
                          <span className="text-sm text-gray-900">{report.createdBy}</span>
                        </div>
                      </td>
                      <td className="px-6 py-4">
                        <div className="flex items-center space-x-2">
                          <Calendar className="h-4 w-4 text-gray-400" />
                          <span className="text-sm text-gray-900">{report.lastModified}</span>
                        </div>
                      </td>
                      <td className="px-6 py-4">
                        <span className="text-sm text-gray-900">
                          {report.lastRun || 'Never'}
                        </span>
                      </td>
                      <td className="px-6 py-4 text-right">
                        <div className="flex items-center justify-end space-x-2">
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => handleViewReport(report.id)}
                          >
                            <Eye className="h-4 w-4" />
                          </Button>
                          <DropdownMenu
                            trigger={
                              <Button variant="outline" size="sm">
                                <MoreHorizontal className="h-4 w-4" />
                              </Button>
                            }
                            items={[
                              {
                                label: 'Edit',
                                icon: Edit,
                                onClick: () => handleEditReport(report.id)
                              },
                              {
                                label: 'Duplicate',
                                icon: Copy,
                                onClick: () => handleDuplicateReport(report.id)
                              },
                              {
                                label: 'Delete',
                                icon: Trash2,
                                onClick: () => handleDeleteReport(report.id),
                                className: 'text-red-600'
                              }
                            ]}
                          />
                        </div>
                      </td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>
          
          {filteredReports.length === 0 && (
            <div className="text-center py-12">
              <BarChart3 className="h-12 w-12 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">No reports found</h3>
              <p className="text-gray-600 mb-6">
                {searchTerm || statusFilter !== 'all' 
                  ? 'Try adjusting your search or filter criteria'
                  : 'Get started by creating your first custom report'
                }
              </p>
              {!searchTerm && statusFilter === 'all' && (
                <Button onClick={handleCreateReport}>
                  <Plus className="h-4 w-4 mr-2" />
                  Create Your First Report
                </Button>
              )}
            </div>
          )}
        </Card>
      </div>
    </div>
  );
}
